-- Master stock list
CREATE TABLE stocks (
    symbol VARCHAR(10) PRIMARY KEY,
    stock_name VARCHAR(50) NOT NULL
);

-- Users table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(25) UNIQUE NOT NULL,
    first_name VARCHAR(25) NOT NULL,
    last_name VARCHAR(25) NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(100) NOT NULL,
    balance DECIMAL(14,2) DEFAULT 10000.00,  -- Default virtual money
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Portfolios table (Users can have multiple portfolios)
CREATE TABLE portfolios (
    portfolio_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    portfolio_name VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Portfolio details (Tracks stocks within a portfolio)
CREATE TABLE portfolio_details (
    portfolio_id INT REFERENCES portfolios(portfolio_id) ON DELETE CASCADE,
    symbol VARCHAR(10) REFERENCES stocks(symbol) ON DELETE CASCADE,
    shares INT NOT NULL,
    total_price DECIMAL(14,2) NOT NULL,
    PRIMARY KEY (portfolio_id, symbol)  -- Prevents duplicate stock entries in the same portfolio
);

-- Transactions table (Tracks stock buy/sell actions)
CREATE TABLE transactions (
    transaction_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    portfolio_id INT REFERENCES portfolios(portfolio_id) ON DELETE CASCADE,
    symbol VARCHAR(10) REFERENCES stocks(symbol) ON DELETE CASCADE,
    transaction_type VARCHAR(25) CHECK (transaction_type IN ('BUY', 'SELL')),
    shares INT NOT NULL,
    price_per_share DECIMAL(14,2) NOT NULL,
    total_price DECIMAL(14,2) NOT NULL,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Watchlist (Tracks stocks that users/portfolios are watching)
CREATE TABLE watchlist (
    watchlist_id SERIAL PRIMARY KEY,
    portfolio_id INT REFERENCES portfolios(portfolio_id) ON DELETE CASCADE,
    symbol VARCHAR(10) REFERENCES stocks(symbol) ON DELETE CASCADE,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Trigger
CREATE OR REPLACE FUNCTION update_last_updated_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.last_updated = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER watchlist_last_updated_trigger
BEFORE UPDATE ON watchlist
FOR EACH ROW
EXECUTE FUNCTION update_last_updated_column();
